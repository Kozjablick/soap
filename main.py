import telebot
from telebot import types

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = '8039802274:AAGfRrppM7Bkqx9hw4hY5U2bjjcaT79pL1Y'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID)
ADMIN_ID = 217676895  # –ü—Ä–∏–º–µ—Ä ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –∞—Ä–æ–º–∞—Ç–∞–º–∏
products = [
    {
        "id": 1,
        "name": "–¢–æ–≤–∞—Ä 1",
        "price": 100,
        "image_url": "https://vchemraznica.ru/wp-content/uploads/2019/01/soap22.jpg",
        "scents": ["–ê—Ä–æ–º–∞—Ç 1", "–ê—Ä–æ–º–∞—Ç 2", "–ê—Ä–æ–º–∞—Ç 3"]  # –°–ø–∏—Å–æ–∫ –∞—Ä–æ–º–∞—Ç–æ–≤
    },
    {
        "id": 2,
        "name": "–¢–æ–≤–∞—Ä 2",
        "price": 200,
        "image_url": "https://vchemraznica.ru/wp-content/uploads/2019/01/soap22.jpg",
        "scents": ["–ê—Ä–æ–º–∞—Ç A", "–ê—Ä–æ–º–∞—Ç B"]
    },
    {
        "id": 3,
        "name": "–¢–æ–≤–∞—Ä 3",
        "price": 300,
        "image_url": "https://vchemraznica.ru/wp-content/uploads/2019/01/soap22.jpg",
        "scents": ["–ê—Ä–æ–º–∞—Ç X", "–ê—Ä–æ–º–∞—Ç Y", "–ê—Ä–æ–º–∞—Ç Z"]
    },
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_carts = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_product_index = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
user_order_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Ç–æ–≤–∞—Ä–∞ –∏ –≤—ã–±–æ—Ä–µ –∞—Ä–æ–º–∞—Ç–∞
temp_data = {}

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
admin_temp_data = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    user_product_index[user_id] = 0  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    show_product(message.chat.id, user_id)

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä
def show_product(chat_id, user_id):
    index = user_product_index[user_id]
    product = products[index]

    # –°–æ–∑–¥–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    markup = types.InlineKeyboardMarkup()
    add_to_cart_button = types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_{product['id']}")
    next_button = types.InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ç–æ–≤–∞—Ä", callback_data="next_product")
    prev_button = types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–æ–≤–∞—Ä", callback_data="prev_product")
    cart_button = types.InlineKeyboardButton(text="üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")

    markup.row(add_to_cart_button)
    markup.row(prev_button, next_button)
    markup.row(cart_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    bot.send_photo(
        chat_id,
        photo=product['image_url'],
        caption=f"{product['name']}\n–¶–µ–Ω–∞: {product['price']} —Ä—É–±.",
        reply_markup=markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: True)
def process_callback(call):
    user_id = call.from_user.id

    if call.data.startswith('add_'):
        # –ó–∞–ø—Ä–æ—Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
        product_id = int(call.data.split('_')[1])
        temp_data[user_id] = {"product_id": product_id, "step": "quantity"}
        bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ForceReply())
        bot.answer_callback_query(call.id)

    elif call.data == "next_product":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç–æ–≤–∞—Ä—É
        user_product_index[user_id] = (user_product_index[user_id] + 1) % len(products)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_product(call.message.chat.id, user_id)

    elif call.data == "prev_product":
        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç–æ–≤–∞—Ä—É
        user_product_index[user_id] = (user_product_index[user_id] - 1) % len(products)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        show_product(call.message.chat.id, user_id)

    elif call.data == "view_cart":
        # –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
        if user_id in user_carts and user_carts[user_id]:
            cart_items = "\n".join([f"{p['name']} ({p['scent']}) - {p['quantity']} —à—Ç. x {p['price']} —Ä—É–±. = {p['quantity'] * p['price']} —Ä—É–±." for p in user_carts[user_id]])
            total_price = sum(p['quantity'] * p['price'] for p in user_carts[user_id])

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω–æ–π
            markup = types.InlineKeyboardMarkup()
            for index, item in enumerate(user_carts[user_id]):
                change_scent_button = types.InlineKeyboardButton(text=f"‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∞—Ä–æ–º–∞—Ç ({item['name']})", callback_data=f"change_scent_{index}")
                markup.add(change_scent_button)
            clear_button = types.InlineKeyboardButton(text="‚ùå –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
            checkout_button = types.InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
            markup.add(clear_button, checkout_button)

            bot.send_message(
                call.message.chat.id,
                f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n{cart_items}\n\n–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.",
                reply_markup=markup
            )
        else:
            bot.answer_callback_query(call.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)

    elif call.data.startswith("change_scent_"):
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        index = int(call.data.split('_')[2])
        if user_id in user_carts and index < len(user_carts[user_id]):
            product_id = user_carts[user_id][index]["id"]
            product = next((p for p in products if p['id'] == product_id), None)
            if product and "scents" in product:
                markup = types.InlineKeyboardMarkup()
                for scent in product["scents"]:
                    markup.add(types.InlineKeyboardButton(text=scent, callback_data=f"update_scent_{index}_{scent}"))
                bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π –∞—Ä–æ–º–∞—Ç:", reply_markup=markup)
            else:
                bot.send_message(call.message.chat.id, "–ê—Ä–æ–º–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        else:
            bot.send_message(call.message.chat.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω–µ.")

    elif call.data.startswith("update_scent_"):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ä–æ–º–∞—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        parts = call.data.split('_')
        index = int(parts[2])
        scent = '_'.join(parts[3:])  # –ê—Ä–æ–º–∞—Ç –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª—ã –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        if user_id in user_carts and index < len(user_carts[user_id]):
            user_carts[user_id][index]["scent"] = scent
            bot.answer_callback_query(call.id, f"–ê—Ä–æ–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {scent}")
            bot.send_message(call.message.chat.id, f"–ê—Ä–æ–º–∞—Ç –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {scent}")
        else:
            bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞—Ä–æ–º–∞—Ç–∞.")

    elif call.data == "clear_cart":
        # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        if user_id in user_carts:
            user_carts[user_id].clear()
            bot.answer_callback_query(call.id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
            bot.send_message(call.message.chat.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞.")
        else:
            bot.answer_callback_query(call.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ —É–∂–µ –ø—É—Å—Ç–∞.", show_alert=True)

    elif call.data == "checkout":
        # –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
        if user_id in user_carts and user_carts[user_id]:
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", reply_markup=types.ForceReply())
            user_order_data[user_id] = {"step": "name"}
        else:
            bot.answer_callback_query(call.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.", show_alert=True)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è —Ñ–æ—Ä–º—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞ –∏ –≤—ã–±–æ—Ä–∞ –∞—Ä–æ–º–∞—Ç–∞)
@bot.message_handler(func=lambda message: True)
def handle_text(message):
    user_id = message.from_user.id

    if user_id in temp_data:
        step = temp_data[user_id].get("step")

        if step == "quantity":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
            try:
                quantity = int(message.text)
                if quantity <= 0:
                    raise ValueError
            except ValueError:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")
                return

            temp_data[user_id]["quantity"] = quantity
            temp_data[user_id]["step"] = "scent"

            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—ã–±–æ—Ä –∞—Ä–æ–º–∞—Ç–∞
            product_id = temp_data[user_id]["product_id"]
            product = next((p for p in products if p['id'] == product_id), None)

            if product and "scents" in product:
                markup = types.InlineKeyboardMarkup()
                for scent in product["scents"]:
                    markup.add(types.InlineKeyboardButton(text=scent, callback_data=f"scent_{scent}"))
                bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∞—Ä–æ–º–∞—Ç:", reply_markup=markup)
            else:
                bot.send_message(message.chat.id, "–ê—Ä–æ–º–∞—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                temp_data.pop(user_id)

        elif step == "scent":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—Ä–æ–º–∞—Ç–∞
            scent = message.text
            product_id = temp_data[user_id]["product_id"]
            quantity = temp_data[user_id]["quantity"]

            product = next((p for p in products if p['id'] == product_id), None)

            if product:
                if user_id not in user_carts:
                    user_carts[user_id] = []
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                existing_item = next((item for item in user_carts[user_id] if item['id'] == product_id and item['scent'] == scent), None)
                if existing_item:
                    existing_item['quantity'] += quantity
                else:
                    user_carts[user_id].append({
                        "id": product_id,
                        "name": product['name'],
                        "price": product['price'],
                        "quantity": quantity,
                        "scent": scent  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞—Ä–æ–º–∞—Ç
                    })
                bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä {product['name']} (–∞—Ä–æ–º–∞—Ç: {scent}) –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç. –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É.")
            else:
                bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            temp_data.pop(user_id)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ —Å–Ω–æ–≤–∞
            show_product(message.chat.id, user_id)

    elif user_id in user_order_data:
        step = user_order_data[user_id].get("step")

        if step == "name":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
            user_order_data[user_id]["name"] = message.text
            user_order_data[user_id]["step"] = "phone"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=types.ForceReply())

        elif step == "phone":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
            user_order_data[user_id]["phone"] = message.text
            user_order_data[user_id]["step"] = "address"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=types.ForceReply())

        elif step == "address":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
            user_order_data[user_id]["address"] = message.text
            user_order_data[user_id]["step"] = "complete"

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
            cart_items = "\n".join([f"{p['name']} ({p['scent']}) - {p['quantity']} —à—Ç. x {p['price']} —Ä—É–±. = {p['quantity'] * p['price']} —Ä—É–±." for p in user_carts[user_id]])
            total_price = sum(p['quantity'] * p['price'] for p in user_carts[user_id])

            order_info = (
                f"–í–∞—à –∑–∞–∫–∞–∑:\n{cart_items}\n\n"
                f"–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n\n"
                f"–ò–º—è: {user_order_data[user_id]['name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_order_data[user_id]['phone']}\n"
                f"–ê–¥—Ä–µ—Å: {user_order_data[user_id]['address']}"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            admin_message = (
                f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
                f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n{cart_items}\n\n"
                f"–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n\n"
                f"–ò–º—è: {user_order_data[user_id]['name']}\n"
                f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_order_data[user_id]['phone']}\n"
                f"–ê–¥—Ä–µ—Å: {user_order_data[user_id]['address']}"
            )
            bot.send_message(ADMIN_ID, admin_message)

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
            markup = types.InlineKeyboardMarkup()
            pay_button = types.InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="pay_order")
            markup.add(pay_button)

            bot.send_message(message.chat.id, order_info, reply_markup=markup)

    elif user_id == ADMIN_ID and user_id in admin_temp_data:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        step = admin_temp_data[user_id].get("step")

        if step == "name":
            admin_temp_data[user_id]["name"] = message.text
            admin_temp_data[user_id]["step"] = "price"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ForceReply())

        elif step == "price":
            try:
                price = int(message.text)
                if price <= 0:
                    raise ValueError
            except ValueError:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).")
                return

            admin_temp_data[user_id]["price"] = price
            admin_temp_data[user_id]["step"] = "image_url"
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ForceReply())

        elif step == "image_url":
            admin_temp_data[user_id]["image_url"] = message.text
            admin_temp_data[user_id]["step"] = "scents"
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞—Ä–æ–º–∞—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ê—Ä–æ–º–∞—Ç 1, –ê—Ä–æ–º–∞—Ç 2):", reply_markup=types.ForceReply())

        elif step == "scents":
            scents = [scent.strip() for scent in message.text.split(",")]
            admin_temp_data[user_id]["scents"] = scents

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            new_product = {
                "id": len(products) + 1,
                "name": admin_temp_data[user_id]["name"],
                "price": admin_temp_data[user_id]["price"],
                "image_url": admin_temp_data[user_id]["image_url"],
                "scents": scents
            }
            products.append(new_product)

            bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä '{new_product['name']}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            admin_temp_data.pop(user_id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞—Ä–æ–º–∞—Ç–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('scent_'))
def process_scent_selection(call):
    user_id = call.from_user.id
    scent = call.data.split('_')[1]

    if user_id in temp_data:
        temp_data[user_id]["scent"] = scent
        bot.send_message(call.message.chat.id, f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞—Ä–æ–º–∞—Ç: {scent}. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ForceReply())
        bot.answer_callback_query(call.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
@bot.callback_query_handler(func=lambda call: call.data == "pay_order")
def process_payment(call):
    user_id = call.from_user.id

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞
    if user_id in user_carts and user_carts[user_id]:
        cart_items = "\n".join([f"{p['name']} ({p['scent']}) - {p['quantity']} —à—Ç. x {p['price']} —Ä—É–±. = {p['quantity'] * p['price']} —Ä—É–±." for p in user_carts[user_id]])
        total_price = sum(p['quantity'] * p['price'] for p in user_carts[user_id])

        order_info = (
            f"–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞:\n{cart_items}\n\n"
            f"–û–±—â–∞—è —Å—É–º–º–∞: {total_price} —Ä—É–±.\n\n"
            f"–ò–º—è: {user_order_data[user_id]['name']}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {user_order_data[user_id]['phone']}\n"
            f"–ê–¥—Ä–µ—Å: {user_order_data[user_id]['address']}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        bot.send_message(call.message.chat.id, order_info)

        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É –∏ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ
        if user_id in user_carts:
            user_carts[user_id].clear()
        if user_id in user_order_data:
            user_order_data.pop(user_id)

        # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        bot.answer_callback_query(call.id, "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑.")
    else:
        bot.answer_callback_query(call.id, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@bot.message_handler(commands=['add_product'])
def add_product(message):
    if message.from_user.id == ADMIN_ID:
        admin_temp_data[message.from_user.id] = {"step": "name"}
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", reply_markup=types.ForceReply())
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    bot.polling(none_stop=True)

#import telebot
#bot = telebot.TeleBot('7017372065:AAF6IBI_IeNPRPKJ6gMUpmkp9jfCMF3zsMg')

#@bot.message_handler(commands=['start','main','hello'])
#def main(message):
#    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name} {message.from_user.last_name} –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞')
#bot.polling(none_stop=True)